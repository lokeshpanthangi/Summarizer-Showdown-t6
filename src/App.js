import React, { useState } from 'react';
import { Container, Row, Col, Nav, Tab } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';
import './App.css';

// Import components
import TextInput from './components/TextInput';
import ModelSelection from './components/ModelSelection';
import SummaryComparison from './components/SummaryComparison';
import AnalyticsDashboard from './components/AnalyticsDashboard';

function App() {
  // State for text input
  const [inputText, setInputText] = useState('');
  
  // State for selected models
  const [openSourceModel, setOpenSourceModel] = useState('facebook/bart-large-cnn');
  const [proprietaryModel, setProprietaryModel] = useState('gpt-3.5-turbo');
  
  // State for API keys
  const [huggingFaceKey, setHuggingFaceKey] = useState('');
  const [openAIKey, setOpenAIKey] = useState('');
  
  // State for summaries
  const [openSourceSummary, setOpenSourceSummary] = useState('');
  const [proprietarySummary, setProprietarySummary] = useState('');
  
  // State for loading indicators
  const [isLoading, setIsLoading] = useState(false);
  
  // State for ratings
  const [ratings, setRatings] = useState({
    openSource: { clarity: 0, accuracy: 0, conciseness: 0 },
    proprietary: { clarity: 0, accuracy: 0, conciseness: 0 }
  });
  
  // State for user preference
  const [preference, setPreference] = useState(null);
  
  // State for analytics data
  const [analyticsData, setAnalyticsData] = useState({
    modelPreferences: { openSource: 0, proprietary: 0 },
    averageRatings: {
      openSource: { clarity: 0, accuracy: 0, conciseness: 0 },
      proprietary: { clarity: 0, accuracy: 0, conciseness: 0 }
    }
  });

  // Handle text input change
  const handleTextChange = (text) => {
    setInputText(text);
  };

  // Handle model selection change
  const handleModelChange = (type, model) => {
    if (type === 'openSource') {
      setOpenSourceModel(model);
    } else {
      setProprietaryModel(model);
    }
  };

  // Handle API key change
  const handleApiKeyChange = (type, key) => {
    if (type === 'huggingFace') {
      setHuggingFaceKey(key);
    } else {
      setOpenAIKey(key);
    }
  };

  // Handle rating change
  const handleRatingChange = (modelType, ratingType, value) => {
    setRatings(prevRatings => ({
      ...prevRatings,
      [modelType]: {
        ...prevRatings[modelType],
        [ratingType]: value
      }
    }));
    
    // Update analytics data
    updateAnalyticsData(modelType, ratingType, value);
  };

  // Handle preference selection
  const handlePreferenceChange = (preferred) => {
    setPreference(preferred);
    
    // Update analytics data
    setAnalyticsData(prevData => ({
      ...prevData,
      modelPreferences: {
        ...prevData.modelPreferences,
        [preferred]: prevData.modelPreferences[preferred] + 1
      }
    }));
  };

  // Update analytics data
  const updateAnalyticsData = (modelType, ratingType, value) => {
    setAnalyticsData(prevData => {
      const newAverageRatings = { ...prevData.averageRatings };
      newAverageRatings[modelType][ratingType] = value;
      
      return {
        ...prevData,
        averageRatings: newAverageRatings
      };
    });
  };

  return (
    <Container fluid className="app-container">
      <header className="text-center my-4">
        <h1>Battle of the LLMs - Summarizer Showdown</h1>
        <p className="lead">Compare summaries generated by different language models</p>
      </header>
      
      <Tab.Container id="app-tabs" defaultActiveKey="input">
        <Row>
          <Col sm={12}>
            <Nav variant="tabs" className="mb-3">
              <Nav.Item>
                <Nav.Link eventKey="input">Input & Models</Nav.Link>
              </Nav.Item>
              <Nav.Item>
                <Nav.Link eventKey="comparison" disabled={!openSourceSummary || !proprietarySummary}>
                  Summary Comparison
                </Nav.Link>
              </Nav.Item>
              <Nav.Item>
                <Nav.Link eventKey="analytics" disabled={!preference}>
                  Analytics Dashboard
                </Nav.Link>
              </Nav.Item>
            </Nav>
          </Col>
        </Row>
        
        <Row>
          <Col sm={12}>
            <Tab.Content>
              <Tab.Pane eventKey="input">
                <Row>
                  <Col md={6}>
                    <TextInput 
                      inputText={inputText} 
                      onTextChange={handleTextChange} 
                    />
                  </Col>
                  <Col md={6}>
                    <ModelSelection 
                      openSourceModel={openSourceModel}
                      proprietaryModel={proprietaryModel}
                      huggingFaceKey={huggingFaceKey}
                      openAIKey={openAIKey}
                      onModelChange={handleModelChange}
                      onApiKeyChange={handleApiKeyChange}
                      inputText={inputText}
                      setOpenSourceSummary={setOpenSourceSummary}
                      setProprietarySummary={setProprietarySummary}
                      isLoading={isLoading}
                      setIsLoading={setIsLoading}
                    />
                  </Col>
                </Row>
              </Tab.Pane>
              
              <Tab.Pane eventKey="comparison">
                <SummaryComparison 
                  openSourceModel={openSourceModel}
                  proprietaryModel={proprietaryModel}
                  openSourceSummary={openSourceSummary}
                  proprietarySummary={proprietarySummary}
                  ratings={ratings}
                  preference={preference}
                  onRatingChange={handleRatingChange}
                  onPreferenceChange={handlePreferenceChange}
                />
              </Tab.Pane>
              
              <Tab.Pane eventKey="analytics">
                <AnalyticsDashboard 
                  analyticsData={analyticsData}
                  openSourceModel={openSourceModel}
                  proprietaryModel={proprietaryModel}
                />
              </Tab.Pane>
            </Tab.Content>
          </Col>
        </Row>
      </Tab.Container>
    </Container>
  );
}

export default App;
